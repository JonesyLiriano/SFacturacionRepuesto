//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CapaDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SFacturacionEntities : DbContext
    {
        public SFacturacionEntities()
            : base("name=SFacturacionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<CobrosVentasCredito> CobrosVentasCreditoes { get; set; }
        public virtual DbSet<DetalleFactura> DetalleFacturas { get; set; }
        public virtual DbSet<DetalleNotaDeCredito> DetalleNotaDeCreditoes { get; set; }
        public virtual DbSet<DetalleOrdenesCompra> DetalleOrdenesCompras { get; set; }
        public virtual DbSet<Factura> Facturas { get; set; }
        public virtual DbSet<FacturasCompra> FacturasCompras { get; set; }
        public virtual DbSet<LineasCreditoVenta> LineasCreditoVentas { get; set; }
        public virtual DbSet<NotasDeCredito> NotasDeCreditoes { get; set; }
        public virtual DbSet<OrdenesCompra> OrdenesCompras { get; set; }
        public virtual DbSet<Producto> Productos { get; set; }
        public virtual DbSet<Proveedore> Proveedores { get; set; }
        public virtual DbSet<TiposFactura> TiposFacturas { get; set; }
        public virtual DbSet<TiposPago> TiposPagoes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Cotizacione> Cotizaciones { get; set; }
        public virtual DbSet<DetalleCotizacione> DetalleCotizaciones { get; set; }
        public virtual DbSet<LineasCreditoCompra> LineasCreditoCompras { get; set; }
        public virtual DbSet<PagosComprasCredito> PagosComprasCreditoes { get; set; }
        public virtual DbSet<Movimiento> Movimientos { get; set; }
    
        public virtual int proc_ActualizarCliente(Nullable<int> clienteID, string nombre, string cedulaORnc, string direccion, string contacto_1, string contacto_2, Nullable<double> descuento, Nullable<double> credito, ObjectParameter resultado)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaORncParameter = cedulaORnc != null ?
                new ObjectParameter("CedulaORnc", cedulaORnc) :
                new ObjectParameter("CedulaORnc", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var contacto_1Parameter = contacto_1 != null ?
                new ObjectParameter("Contacto_1", contacto_1) :
                new ObjectParameter("Contacto_1", typeof(string));
    
            var contacto_2Parameter = contacto_2 != null ?
                new ObjectParameter("Contacto_2", contacto_2) :
                new ObjectParameter("Contacto_2", typeof(string));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(double));
    
            var creditoParameter = credito.HasValue ?
                new ObjectParameter("Credito", credito) :
                new ObjectParameter("Credito", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarCliente", clienteIDParameter, nombreParameter, cedulaORncParameter, direccionParameter, contacto_1Parameter, contacto_2Parameter, descuentoParameter, creditoParameter, resultado);
        }
    
        public virtual int proc_ActualizarDetalleOrdenCompra(Nullable<int> ordenCompraID, Nullable<int> productoID, Nullable<double> cantidadOrdenada, Nullable<double> cantidadRecibida, Nullable<decimal> precio, Nullable<bool> estatus, ObjectParameter resultado)
        {
            var ordenCompraIDParameter = ordenCompraID.HasValue ?
                new ObjectParameter("OrdenCompraID", ordenCompraID) :
                new ObjectParameter("OrdenCompraID", typeof(int));
    
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var cantidadOrdenadaParameter = cantidadOrdenada.HasValue ?
                new ObjectParameter("CantidadOrdenada", cantidadOrdenada) :
                new ObjectParameter("CantidadOrdenada", typeof(double));
    
            var cantidadRecibidaParameter = cantidadRecibida.HasValue ?
                new ObjectParameter("CantidadRecibida", cantidadRecibida) :
                new ObjectParameter("CantidadRecibida", typeof(double));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarDetalleOrdenCompra", ordenCompraIDParameter, productoIDParameter, cantidadOrdenadaParameter, cantidadRecibidaParameter, precioParameter, estatusParameter, resultado);
        }
    
        public virtual int proc_ActualizarLineaCreditoVenta(Nullable<int> lineaCreditoVentaID, Nullable<bool> estatus, ObjectParameter resultado)
        {
            var lineaCreditoVentaIDParameter = lineaCreditoVentaID.HasValue ?
                new ObjectParameter("LineaCreditoVentaID", lineaCreditoVentaID) :
                new ObjectParameter("LineaCreditoVentaID", typeof(int));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarLineaCreditoVenta", lineaCreditoVentaIDParameter, estatusParameter, resultado);
        }
    
        public virtual int proc_ActualizarProducto(Nullable<int> productoID, string descripcion, Nullable<double> existencia, Nullable<decimal> precioCompra, Nullable<decimal> precioVenta, Nullable<decimal> precioVentaMin, Nullable<int> proveedorID, Nullable<bool> servicio, Nullable<bool> iTBIS, Nullable<decimal> descuento, Nullable<double> cantMin, Nullable<double> cantMax, string codigoBarra, string unidadMedida, string referencia, string marca, string calidad, ObjectParameter resultado)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var existenciaParameter = existencia.HasValue ?
                new ObjectParameter("Existencia", existencia) :
                new ObjectParameter("Existencia", typeof(double));
    
            var precioCompraParameter = precioCompra.HasValue ?
                new ObjectParameter("PrecioCompra", precioCompra) :
                new ObjectParameter("PrecioCompra", typeof(decimal));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("PrecioVenta", precioVenta) :
                new ObjectParameter("PrecioVenta", typeof(decimal));
    
            var precioVentaMinParameter = precioVentaMin.HasValue ?
                new ObjectParameter("PrecioVentaMin", precioVentaMin) :
                new ObjectParameter("PrecioVentaMin", typeof(decimal));
    
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            var servicioParameter = servicio.HasValue ?
                new ObjectParameter("Servicio", servicio) :
                new ObjectParameter("Servicio", typeof(bool));
    
            var iTBISParameter = iTBIS.HasValue ?
                new ObjectParameter("ITBIS", iTBIS) :
                new ObjectParameter("ITBIS", typeof(bool));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(decimal));
    
            var cantMinParameter = cantMin.HasValue ?
                new ObjectParameter("CantMin", cantMin) :
                new ObjectParameter("CantMin", typeof(double));
    
            var cantMaxParameter = cantMax.HasValue ?
                new ObjectParameter("CantMax", cantMax) :
                new ObjectParameter("CantMax", typeof(double));
    
            var codigoBarraParameter = codigoBarra != null ?
                new ObjectParameter("CodigoBarra", codigoBarra) :
                new ObjectParameter("CodigoBarra", typeof(string));
    
            var unidadMedidaParameter = unidadMedida != null ?
                new ObjectParameter("UnidadMedida", unidadMedida) :
                new ObjectParameter("UnidadMedida", typeof(string));
    
            var referenciaParameter = referencia != null ?
                new ObjectParameter("Referencia", referencia) :
                new ObjectParameter("Referencia", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(string));
    
            var calidadParameter = calidad != null ?
                new ObjectParameter("Calidad", calidad) :
                new ObjectParameter("Calidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarProducto", productoIDParameter, descripcionParameter, existenciaParameter, precioCompraParameter, precioVentaParameter, precioVentaMinParameter, proveedorIDParameter, servicioParameter, iTBISParameter, descuentoParameter, cantMinParameter, cantMaxParameter, codigoBarraParameter, unidadMedidaParameter, referenciaParameter, marcaParameter, calidadParameter, resultado);
        }
    
        public virtual int proc_ActualizarProveedor(Nullable<int> proveedorID, string nombre, string cedulaORnc, string direccion, string contacto_1, string contacto_2, string datoAdicional, ObjectParameter resultado)
        {
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaORncParameter = cedulaORnc != null ?
                new ObjectParameter("CedulaORnc", cedulaORnc) :
                new ObjectParameter("CedulaORnc", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var contacto_1Parameter = contacto_1 != null ?
                new ObjectParameter("Contacto_1", contacto_1) :
                new ObjectParameter("Contacto_1", typeof(string));
    
            var contacto_2Parameter = contacto_2 != null ?
                new ObjectParameter("Contacto_2", contacto_2) :
                new ObjectParameter("Contacto_2", typeof(string));
    
            var datoAdicionalParameter = datoAdicional != null ?
                new ObjectParameter("DatoAdicional", datoAdicional) :
                new ObjectParameter("DatoAdicional", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarProveedor", proveedorIDParameter, nombreParameter, cedulaORncParameter, direccionParameter, contacto_1Parameter, contacto_2Parameter, datoAdicionalParameter, resultado);
        }
    
        public virtual int proc_ActualizarUsers(Nullable<int> userID, string userName, string userPassword, string userLevel, ObjectParameter resultado)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userLevelParameter = userLevel != null ?
                new ObjectParameter("UserLevel", userLevel) :
                new ObjectParameter("UserLevel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarUsers", userIDParameter, userNameParameter, userPasswordParameter, userLevelParameter, resultado);
        }
    
        public virtual int proc_BorrarCliente(Nullable<int> clienteID, ObjectParameter resultado)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarCliente", clienteIDParameter, resultado);
        }
    
        public virtual int proc_BorrarDetalleOrdenCompra(Nullable<int> ordenCompraID, Nullable<int> productoID, ObjectParameter resultado)
        {
            var ordenCompraIDParameter = ordenCompraID.HasValue ?
                new ObjectParameter("OrdenCompraID", ordenCompraID) :
                new ObjectParameter("OrdenCompraID", typeof(int));
    
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarDetalleOrdenCompra", ordenCompraIDParameter, productoIDParameter, resultado);
        }
    
        public virtual int proc_BorrarOrdenCompra(Nullable<int> ordenCompraID, ObjectParameter resultado)
        {
            var ordenCompraIDParameter = ordenCompraID.HasValue ?
                new ObjectParameter("OrdenCompraID", ordenCompraID) :
                new ObjectParameter("OrdenCompraID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarOrdenCompra", ordenCompraIDParameter, resultado);
        }
    
        public virtual int proc_BorrarProducto(Nullable<int> productoID, ObjectParameter resultado)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarProducto", productoIDParameter, resultado);
        }
    
        public virtual int proc_BorrarProveedor(Nullable<int> proveedorID, ObjectParameter resultado)
        {
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarProveedor", proveedorIDParameter, resultado);
        }
    
        public virtual int proc_BorrarUser(Nullable<int> userID, ObjectParameter resultado)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarUser", userIDParameter, resultado);
        }
    
        public virtual ObjectResult<proc_BuscarProductosPorProveedor_Result> proc_BuscarProductosPorProveedor(Nullable<int> proveedorID, Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BuscarProductosPorProveedor_Result>("proc_BuscarProductosPorProveedor", proveedorIDParameter, indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual int proc_CalcularGanancias(ObjectParameter gananciaFContDia, ObjectParameter gananciaFContSemana, ObjectParameter gananciaFContMes, ObjectParameter gananciaFCredDia, ObjectParameter gananciaFCredSemana, ObjectParameter gananciaFCredMes, Nullable<decimal> itbis)
        {
            var itbisParameter = itbis.HasValue ?
                new ObjectParameter("Itbis", itbis) :
                new ObjectParameter("Itbis", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_CalcularGanancias", gananciaFContDia, gananciaFContSemana, gananciaFContMes, gananciaFCredDia, gananciaFCredSemana, gananciaFCredMes, itbisParameter);
        }
    
        public virtual ObjectResult<proc_CargarCobrosVentaCredito_Result> proc_CargarCobrosVentaCredito(Nullable<int> lineaVentaCreditoID)
        {
            var lineaVentaCreditoIDParameter = lineaVentaCreditoID.HasValue ?
                new ObjectParameter("LineaVentaCreditoID", lineaVentaCreditoID) :
                new ObjectParameter("LineaVentaCreditoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarCobrosVentaCredito_Result>("proc_CargarCobrosVentaCredito", lineaVentaCreditoIDParameter);
        }
    
        public virtual ObjectResult<proc_CargarFacturasPendientes_Result> proc_CargarFacturasPendientes(Nullable<int> clienteID)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturasPendientes_Result>("proc_CargarFacturasPendientes", clienteIDParameter);
        }
    
        public virtual ObjectResult<proc_CargarFacturasPFecha_Result> proc_CargarFacturasPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturasPFecha_Result>("proc_CargarFacturasPFecha", fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<proc_CargarMontoFacturaNC_Result> proc_CargarMontoFacturaNC(Nullable<int> facturaID)
        {
            var facturaIDParameter = facturaID.HasValue ?
                new ObjectParameter("FacturaID", facturaID) :
                new ObjectParameter("FacturaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarMontoFacturaNC_Result>("proc_CargarMontoFacturaNC", facturaIDParameter);
        }
    
        public virtual ObjectResult<proc_CargarNotasDeCreditoPFecha_Result> proc_CargarNotasDeCreditoPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarNotasDeCreditoPFecha_Result>("proc_CargarNotasDeCreditoPFecha", fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<proc_CargarOrdenesCompraPFecha_Result> proc_CargarOrdenesCompraPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarOrdenesCompraPFecha_Result>("proc_CargarOrdenesCompraPFecha", fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<proc_CargarTodasFacturas_Result> proc_CargarTodasFacturas(Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasFacturas_Result>("proc_CargarTodasFacturas", indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual ObjectResult<proc_CargarTodasLineasCreditoVentas_Result> proc_CargarTodasLineasCreditoVentas(Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasLineasCreditoVentas_Result>("proc_CargarTodasLineasCreditoVentas", indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual ObjectResult<proc_CargarTodasNotasDeCredito_Result> proc_CargarTodasNotasDeCredito(Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasNotasDeCredito_Result>("proc_CargarTodasNotasDeCredito", indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual ObjectResult<proc_CargarTodasOrdenesCompra_Result> proc_CargarTodasOrdenesCompra(Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasOrdenesCompra_Result>("proc_CargarTodasOrdenesCompra", indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual ObjectResult<proc_CargarTodosClientes_Result> proc_CargarTodosClientes(Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosClientes_Result>("proc_CargarTodosClientes", indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual ObjectResult<proc_CargarTodosProductos_Result> proc_CargarTodosProductos(Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosProductos_Result>("proc_CargarTodosProductos", indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual ObjectResult<proc_CargarTodosProveedores_Result> proc_CargarTodosProveedores(Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosProveedores_Result>("proc_CargarTodosProveedores", indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual ObjectResult<proc_CargarTodosTiposFactura_Result> proc_CargarTodosTiposFactura()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosTiposFactura_Result>("proc_CargarTodosTiposFactura");
        }
    
        public virtual ObjectResult<proc_CargarTodosTiposPagos_Result> proc_CargarTodosTiposPagos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosTiposPagos_Result>("proc_CargarTodosTiposPagos");
        }
    
        public virtual ObjectResult<proc_CargarTodosUsers_Result> proc_CargarTodosUsers(Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodosUsers_Result>("proc_CargarTodosUsers", indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual int proc_CerrarOrdenCompra(Nullable<int> ordenCompraID)
        {
            var ordenCompraIDParameter = ordenCompraID.HasValue ?
                new ObjectParameter("OrdenCompraID", ordenCompraID) :
                new ObjectParameter("OrdenCompraID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_CerrarOrdenCompra", ordenCompraIDParameter);
        }
    
        public virtual ObjectResult<proc_ComprobanteNotaDeCredito_Result> proc_ComprobanteNotaDeCredito(Nullable<int> notaDeCreditoID)
        {
            var notaDeCreditoIDParameter = notaDeCreditoID.HasValue ?
                new ObjectParameter("NotaDeCreditoID", notaDeCreditoID) :
                new ObjectParameter("NotaDeCreditoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ComprobanteNotaDeCredito_Result>("proc_ComprobanteNotaDeCredito", notaDeCreditoIDParameter);
        }
    
        public virtual ObjectResult<proc_ComprobantePagoLineaCreditoVenta_Result> proc_ComprobantePagoLineaCreditoVenta(Nullable<int> cobroVentaCreditoID)
        {
            var cobroVentaCreditoIDParameter = cobroVentaCreditoID.HasValue ?
                new ObjectParameter("CobroVentaCreditoID", cobroVentaCreditoID) :
                new ObjectParameter("CobroVentaCreditoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ComprobantePagoLineaCreditoVenta_Result>("proc_ComprobantePagoLineaCreditoVenta", cobroVentaCreditoIDParameter);
        }
    
        public virtual int proc_InsertarCategoriaProd(ObjectParameter categoriaProdID, string categoria, ObjectParameter resultado)
        {
            var categoriaParameter = categoria != null ?
                new ObjectParameter("Categoria", categoria) :
                new ObjectParameter("Categoria", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarCategoriaProd", categoriaProdID, categoriaParameter, resultado);
        }
    
        public virtual int proc_InsertarCliente(ObjectParameter clienteID, string nombre, string cedulaORnc, string direccion, string contacto_1, string contacto_2, Nullable<double> descuento, Nullable<double> credito, ObjectParameter resultado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaORncParameter = cedulaORnc != null ?
                new ObjectParameter("CedulaORnc", cedulaORnc) :
                new ObjectParameter("CedulaORnc", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var contacto_1Parameter = contacto_1 != null ?
                new ObjectParameter("Contacto_1", contacto_1) :
                new ObjectParameter("Contacto_1", typeof(string));
    
            var contacto_2Parameter = contacto_2 != null ?
                new ObjectParameter("Contacto_2", contacto_2) :
                new ObjectParameter("Contacto_2", typeof(string));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(double));
    
            var creditoParameter = credito.HasValue ?
                new ObjectParameter("Credito", credito) :
                new ObjectParameter("Credito", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarCliente", clienteID, nombreParameter, cedulaORncParameter, direccionParameter, contacto_1Parameter, contacto_2Parameter, descuentoParameter, creditoParameter, resultado);
        }
    
        public virtual int proc_InsertarCobroVentaCredito(ObjectParameter cobroVentaCreditoID, Nullable<int> lineaCreditoVentaID, Nullable<System.DateTime> fechaCobro, Nullable<decimal> monto, Nullable<int> userID, string concepto, ObjectParameter resultado)
        {
            var lineaCreditoVentaIDParameter = lineaCreditoVentaID.HasValue ?
                new ObjectParameter("LineaCreditoVentaID", lineaCreditoVentaID) :
                new ObjectParameter("LineaCreditoVentaID", typeof(int));
    
            var fechaCobroParameter = fechaCobro.HasValue ?
                new ObjectParameter("FechaCobro", fechaCobro) :
                new ObjectParameter("FechaCobro", typeof(System.DateTime));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarCobroVentaCredito", cobroVentaCreditoID, lineaCreditoVentaIDParameter, fechaCobroParameter, montoParameter, userIDParameter, conceptoParameter, resultado);
        }
    
        public virtual int proc_InsertarDetalleFactura(ObjectParameter detalleFacturaID, Nullable<int> facturaID, Nullable<int> productoID, Nullable<double> cantVen, Nullable<decimal> precio, Nullable<decimal> iTBIS, Nullable<decimal> descuento, ObjectParameter resultado)
        {
            var facturaIDParameter = facturaID.HasValue ?
                new ObjectParameter("FacturaID", facturaID) :
                new ObjectParameter("FacturaID", typeof(int));
    
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var cantVenParameter = cantVen.HasValue ?
                new ObjectParameter("CantVen", cantVen) :
                new ObjectParameter("CantVen", typeof(double));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var iTBISParameter = iTBIS.HasValue ?
                new ObjectParameter("ITBIS", iTBIS) :
                new ObjectParameter("ITBIS", typeof(decimal));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarDetalleFactura", detalleFacturaID, facturaIDParameter, productoIDParameter, cantVenParameter, precioParameter, iTBISParameter, descuentoParameter, resultado);
        }
    
        public virtual int proc_InsertarDetalleNotaDeCredito(ObjectParameter detalleNotaDeCreditoID, Nullable<int> notaDeCreditoID, Nullable<int> productoID, Nullable<double> cantDevuelta, Nullable<double> cantInventariada, Nullable<decimal> precio, string comentario, ObjectParameter resultado)
        {
            var notaDeCreditoIDParameter = notaDeCreditoID.HasValue ?
                new ObjectParameter("NotaDeCreditoID", notaDeCreditoID) :
                new ObjectParameter("NotaDeCreditoID", typeof(int));
    
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var cantDevueltaParameter = cantDevuelta.HasValue ?
                new ObjectParameter("CantDevuelta", cantDevuelta) :
                new ObjectParameter("CantDevuelta", typeof(double));
    
            var cantInventariadaParameter = cantInventariada.HasValue ?
                new ObjectParameter("CantInventariada", cantInventariada) :
                new ObjectParameter("CantInventariada", typeof(double));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("Comentario", comentario) :
                new ObjectParameter("Comentario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarDetalleNotaDeCredito", detalleNotaDeCreditoID, notaDeCreditoIDParameter, productoIDParameter, cantDevueltaParameter, cantInventariadaParameter, precioParameter, comentarioParameter, resultado);
        }
    
        public virtual int proc_InsertarDetalleOrdenCompra(ObjectParameter detalleOrdenCompraID, Nullable<int> ordenCompraID, Nullable<int> productoID, Nullable<double> cantOrdenada, Nullable<double> cantRecibida, Nullable<decimal> precio, Nullable<bool> estatus, ObjectParameter resultado)
        {
            var ordenCompraIDParameter = ordenCompraID.HasValue ?
                new ObjectParameter("OrdenCompraID", ordenCompraID) :
                new ObjectParameter("OrdenCompraID", typeof(int));
    
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var cantOrdenadaParameter = cantOrdenada.HasValue ?
                new ObjectParameter("CantOrdenada", cantOrdenada) :
                new ObjectParameter("CantOrdenada", typeof(double));
    
            var cantRecibidaParameter = cantRecibida.HasValue ?
                new ObjectParameter("CantRecibida", cantRecibida) :
                new ObjectParameter("CantRecibida", typeof(double));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarDetalleOrdenCompra", detalleOrdenCompraID, ordenCompraIDParameter, productoIDParameter, cantOrdenadaParameter, cantRecibidaParameter, precioParameter, estatusParameter, resultado);
        }
    
        public virtual int proc_InsertarFactura(ObjectParameter facturaID, Nullable<int> clienteID, Nullable<System.DateTime> fecha, Nullable<int> tipoPagoID, Nullable<int> tipoFacturaID, string nCF, Nullable<System.DateTime> fechaVencimiento, Nullable<int> userID, string rNC, string entidad, Nullable<decimal> descuentoCliente, Nullable<int> cotizacionID, ObjectParameter resultado)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var tipoPagoIDParameter = tipoPagoID.HasValue ?
                new ObjectParameter("TipoPagoID", tipoPagoID) :
                new ObjectParameter("TipoPagoID", typeof(int));
    
            var tipoFacturaIDParameter = tipoFacturaID.HasValue ?
                new ObjectParameter("TipoFacturaID", tipoFacturaID) :
                new ObjectParameter("TipoFacturaID", typeof(int));
    
            var nCFParameter = nCF != null ?
                new ObjectParameter("NCF", nCF) :
                new ObjectParameter("NCF", typeof(string));
    
            var fechaVencimientoParameter = fechaVencimiento.HasValue ?
                new ObjectParameter("FechaVencimiento", fechaVencimiento) :
                new ObjectParameter("FechaVencimiento", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var rNCParameter = rNC != null ?
                new ObjectParameter("RNC", rNC) :
                new ObjectParameter("RNC", typeof(string));
    
            var entidadParameter = entidad != null ?
                new ObjectParameter("Entidad", entidad) :
                new ObjectParameter("Entidad", typeof(string));
    
            var descuentoClienteParameter = descuentoCliente.HasValue ?
                new ObjectParameter("DescuentoCliente", descuentoCliente) :
                new ObjectParameter("DescuentoCliente", typeof(decimal));
    
            var cotizacionIDParameter = cotizacionID.HasValue ?
                new ObjectParameter("CotizacionID", cotizacionID) :
                new ObjectParameter("CotizacionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarFactura", facturaID, clienteIDParameter, fechaParameter, tipoPagoIDParameter, tipoFacturaIDParameter, nCFParameter, fechaVencimientoParameter, userIDParameter, rNCParameter, entidadParameter, descuentoClienteParameter, cotizacionIDParameter, resultado);
        }
    
        public virtual int proc_InsertarFacturaCompra(ObjectParameter facturaCompraID, Nullable<int> ordenCompraID, string nCF, Nullable<System.DateTime> fechaVencimiento, Nullable<System.DateTime> fechaFactura, Nullable<int> tipoPagoID, Nullable<decimal> subTotal, Nullable<decimal> iTBIS, ObjectParameter resultado)
        {
            var ordenCompraIDParameter = ordenCompraID.HasValue ?
                new ObjectParameter("OrdenCompraID", ordenCompraID) :
                new ObjectParameter("OrdenCompraID", typeof(int));
    
            var nCFParameter = nCF != null ?
                new ObjectParameter("NCF", nCF) :
                new ObjectParameter("NCF", typeof(string));
    
            var fechaVencimientoParameter = fechaVencimiento.HasValue ?
                new ObjectParameter("FechaVencimiento", fechaVencimiento) :
                new ObjectParameter("FechaVencimiento", typeof(System.DateTime));
    
            var fechaFacturaParameter = fechaFactura.HasValue ?
                new ObjectParameter("FechaFactura", fechaFactura) :
                new ObjectParameter("FechaFactura", typeof(System.DateTime));
    
            var tipoPagoIDParameter = tipoPagoID.HasValue ?
                new ObjectParameter("TipoPagoID", tipoPagoID) :
                new ObjectParameter("TipoPagoID", typeof(int));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var iTBISParameter = iTBIS.HasValue ?
                new ObjectParameter("ITBIS", iTBIS) :
                new ObjectParameter("ITBIS", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarFacturaCompra", facturaCompraID, ordenCompraIDParameter, nCFParameter, fechaVencimientoParameter, fechaFacturaParameter, tipoPagoIDParameter, subTotalParameter, iTBISParameter, resultado);
        }
    
        public virtual int proc_InsertarLineaCreditoVenta(ObjectParameter lineaCreditoVentaID, Nullable<int> facturaID, Nullable<bool> estatus, ObjectParameter resultado)
        {
            var facturaIDParameter = facturaID.HasValue ?
                new ObjectParameter("FacturaID", facturaID) :
                new ObjectParameter("FacturaID", typeof(int));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarLineaCreditoVenta", lineaCreditoVentaID, facturaIDParameter, estatusParameter, resultado);
        }
    
        public virtual int proc_InsertarNotaDeCredito(ObjectParameter notaDeCreditoID, Nullable<int> facturaID, Nullable<int> facturaAplicarID, Nullable<System.DateTime> fecha, Nullable<int> userID, string nCF, Nullable<System.DateTime> fechaVencimiento, Nullable<decimal> valorAplicado, Nullable<bool> iTBIS, ObjectParameter resultado)
        {
            var facturaIDParameter = facturaID.HasValue ?
                new ObjectParameter("FacturaID", facturaID) :
                new ObjectParameter("FacturaID", typeof(int));
    
            var facturaAplicarIDParameter = facturaAplicarID.HasValue ?
                new ObjectParameter("FacturaAplicarID", facturaAplicarID) :
                new ObjectParameter("FacturaAplicarID", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var nCFParameter = nCF != null ?
                new ObjectParameter("NCF", nCF) :
                new ObjectParameter("NCF", typeof(string));
    
            var fechaVencimientoParameter = fechaVencimiento.HasValue ?
                new ObjectParameter("FechaVencimiento", fechaVencimiento) :
                new ObjectParameter("FechaVencimiento", typeof(System.DateTime));
    
            var valorAplicadoParameter = valorAplicado.HasValue ?
                new ObjectParameter("ValorAplicado", valorAplicado) :
                new ObjectParameter("ValorAplicado", typeof(decimal));
    
            var iTBISParameter = iTBIS.HasValue ?
                new ObjectParameter("ITBIS", iTBIS) :
                new ObjectParameter("ITBIS", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarNotaDeCredito", notaDeCreditoID, facturaIDParameter, facturaAplicarIDParameter, fechaParameter, userIDParameter, nCFParameter, fechaVencimientoParameter, valorAplicadoParameter, iTBISParameter, resultado);
        }
    
        public virtual int proc_InsertarOrdenCompra(ObjectParameter ordenCompraID, Nullable<int> proveedorID, Nullable<System.DateTime> fechaPedido, Nullable<bool> estatus, ObjectParameter resultado)
        {
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            var fechaPedidoParameter = fechaPedido.HasValue ?
                new ObjectParameter("FechaPedido", fechaPedido) :
                new ObjectParameter("FechaPedido", typeof(System.DateTime));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarOrdenCompra", ordenCompraID, proveedorIDParameter, fechaPedidoParameter, estatusParameter, resultado);
        }
    
        public virtual int proc_InsertarProveedor(ObjectParameter proveedorID, string nombre, string cedulaORnc, string direccion, string contacto_1, string contacto_2, string datoAdicional, ObjectParameter resultado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaORncParameter = cedulaORnc != null ?
                new ObjectParameter("CedulaORnc", cedulaORnc) :
                new ObjectParameter("CedulaORnc", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var contacto_1Parameter = contacto_1 != null ?
                new ObjectParameter("Contacto_1", contacto_1) :
                new ObjectParameter("Contacto_1", typeof(string));
    
            var contacto_2Parameter = contacto_2 != null ?
                new ObjectParameter("Contacto_2", contacto_2) :
                new ObjectParameter("Contacto_2", typeof(string));
    
            var datoAdicionalParameter = datoAdicional != null ?
                new ObjectParameter("DatoAdicional", datoAdicional) :
                new ObjectParameter("DatoAdicional", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarProveedor", proveedorID, nombreParameter, cedulaORncParameter, direccionParameter, contacto_1Parameter, contacto_2Parameter, datoAdicionalParameter, resultado);
        }
    
        public virtual int proc_InsertarUser(ObjectParameter userID, string userName, string userPassword, string userLevel, ObjectParameter resultado)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userLevelParameter = userLevel != null ?
                new ObjectParameter("UserLevel", userLevel) :
                new ObjectParameter("UserLevel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarUser", userID, userNameParameter, userPasswordParameter, userLevelParameter, resultado);
        }
    
        public virtual int proc_RealizarBackUp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_RealizarBackUp");
        }
    
        public virtual ObjectResult<proc_ValidarUsuario_Result> proc_ValidarUsuario(string user, string password, ObjectParameter resultado)
        {
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ValidarUsuario_Result>("proc_ValidarUsuario", userParameter, passwordParameter, resultado);
        }
    
        public virtual int proc_VerificarLimite(ObjectParameter resultado, Nullable<int> clienteID, Nullable<decimal> montoFactura)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var montoFacturaParameter = montoFactura.HasValue ?
                new ObjectParameter("MontoFactura", montoFactura) :
                new ObjectParameter("MontoFactura", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_VerificarLimite", resultado, clienteIDParameter, montoFacturaParameter);
        }
    
        public virtual ObjectResult<proc_CargarProductosFactura_Result> proc_CargarProductosFactura(Nullable<int> facturaID)
        {
            var facturaIDParameter = facturaID.HasValue ?
                new ObjectParameter("FacturaID", facturaID) :
                new ObjectParameter("FacturaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarProductosFactura_Result>("proc_CargarProductosFactura", facturaIDParameter);
        }
    
        public virtual ObjectResult<proc_CargarDetalleOrdenCompra_Result> proc_CargarDetalleOrdenCompra(Nullable<int> ordenCompraID)
        {
            var ordenCompraIDParameter = ordenCompraID.HasValue ?
                new ObjectParameter("OrdenCompraID", ordenCompraID) :
                new ObjectParameter("OrdenCompraID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarDetalleOrdenCompra_Result>("proc_CargarDetalleOrdenCompra", ordenCompraIDParameter);
        }
    
        public virtual ObjectResult<proc_CargarProductosExistBajaPorProveedor_Result> proc_CargarProductosExistBajaPorProveedor(Nullable<int> proveedorID, Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarProductosExistBajaPorProveedor_Result>("proc_CargarProductosExistBajaPorProveedor", proveedorIDParameter, indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual int proc_InsertarProducto(ObjectParameter productoID, string descripcion, Nullable<double> existencia, Nullable<decimal> precioCompra, Nullable<decimal> precioVenta, Nullable<decimal> precioVentaMin, Nullable<int> proveedorID, Nullable<bool> servicio, Nullable<bool> iTBIS, Nullable<decimal> descuento, Nullable<double> cantMin, Nullable<double> cantMax, string codigoBarra, string unidadMedida, string referencia, string marca, string calidad, ObjectParameter resultado)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var existenciaParameter = existencia.HasValue ?
                new ObjectParameter("Existencia", existencia) :
                new ObjectParameter("Existencia", typeof(double));
    
            var precioCompraParameter = precioCompra.HasValue ?
                new ObjectParameter("PrecioCompra", precioCompra) :
                new ObjectParameter("PrecioCompra", typeof(decimal));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("PrecioVenta", precioVenta) :
                new ObjectParameter("PrecioVenta", typeof(decimal));
    
            var precioVentaMinParameter = precioVentaMin.HasValue ?
                new ObjectParameter("PrecioVentaMin", precioVentaMin) :
                new ObjectParameter("PrecioVentaMin", typeof(decimal));
    
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            var servicioParameter = servicio.HasValue ?
                new ObjectParameter("Servicio", servicio) :
                new ObjectParameter("Servicio", typeof(bool));
    
            var iTBISParameter = iTBIS.HasValue ?
                new ObjectParameter("ITBIS", iTBIS) :
                new ObjectParameter("ITBIS", typeof(bool));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(decimal));
    
            var cantMinParameter = cantMin.HasValue ?
                new ObjectParameter("CantMin", cantMin) :
                new ObjectParameter("CantMin", typeof(double));
    
            var cantMaxParameter = cantMax.HasValue ?
                new ObjectParameter("CantMax", cantMax) :
                new ObjectParameter("CantMax", typeof(double));
    
            var codigoBarraParameter = codigoBarra != null ?
                new ObjectParameter("CodigoBarra", codigoBarra) :
                new ObjectParameter("CodigoBarra", typeof(string));
    
            var unidadMedidaParameter = unidadMedida != null ?
                new ObjectParameter("UnidadMedida", unidadMedida) :
                new ObjectParameter("UnidadMedida", typeof(string));
    
            var referenciaParameter = referencia != null ?
                new ObjectParameter("Referencia", referencia) :
                new ObjectParameter("Referencia", typeof(string));
    
            var marcaParameter = marca != null ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(string));
    
            var calidadParameter = calidad != null ?
                new ObjectParameter("Calidad", calidad) :
                new ObjectParameter("Calidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarProducto", productoID, descripcionParameter, existenciaParameter, precioCompraParameter, precioVentaParameter, precioVentaMinParameter, proveedorIDParameter, servicioParameter, iTBISParameter, descuentoParameter, cantMinParameter, cantMaxParameter, codigoBarraParameter, unidadMedidaParameter, referenciaParameter, marcaParameter, calidadParameter, resultado);
        }
    
        public virtual ObjectResult<proc_BuscarProductosPorCodigoBarra_Result> proc_BuscarProductosPorCodigoBarra(string codigoBarra)
        {
            var codigoBarraParameter = codigoBarra != null ?
                new ObjectParameter("CodigoBarra", codigoBarra) :
                new ObjectParameter("CodigoBarra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BuscarProductosPorCodigoBarra_Result>("proc_BuscarProductosPorCodigoBarra", codigoBarraParameter);
        }
    
        public virtual int proc_ActualizarCantidadProducto(string codigoBarra, Nullable<double> existencia, ObjectParameter resultado)
        {
            var codigoBarraParameter = codigoBarra != null ?
                new ObjectParameter("CodigoBarra", codigoBarra) :
                new ObjectParameter("CodigoBarra", typeof(string));
    
            var existenciaParameter = existencia.HasValue ?
                new ObjectParameter("Existencia", existencia) :
                new ObjectParameter("Existencia", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarCantidadProducto", codigoBarraParameter, existenciaParameter, resultado);
        }
    
        public virtual ObjectResult<proc_CargarTodasCotizaciones_Result> proc_CargarTodasCotizaciones(Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasCotizaciones_Result>("proc_CargarTodasCotizaciones", indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual ObjectResult<proc_ComprobanteCotizacion_Result> proc_ComprobanteCotizacion(Nullable<int> cotizacionID)
        {
            var cotizacionIDParameter = cotizacionID.HasValue ?
                new ObjectParameter("CotizacionID", cotizacionID) :
                new ObjectParameter("CotizacionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ComprobanteCotizacion_Result>("proc_ComprobanteCotizacion", cotizacionIDParameter);
        }
    
        public virtual int proc_InsertarCotizacion(ObjectParameter cotizacionID, Nullable<int> clienteID, Nullable<System.DateTime> fecha, Nullable<int> userID, Nullable<bool> facturada, Nullable<decimal> descuentoCliente, ObjectParameter resultado)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var facturadaParameter = facturada.HasValue ?
                new ObjectParameter("Facturada", facturada) :
                new ObjectParameter("Facturada", typeof(bool));
    
            var descuentoClienteParameter = descuentoCliente.HasValue ?
                new ObjectParameter("DescuentoCliente", descuentoCliente) :
                new ObjectParameter("DescuentoCliente", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarCotizacion", cotizacionID, clienteIDParameter, fechaParameter, userIDParameter, facturadaParameter, descuentoClienteParameter, resultado);
        }
    
        public virtual int proc_InsertarDetalleCotizacion(ObjectParameter detalleCotizacionID, Nullable<int> cotizacionID, Nullable<int> productoID, Nullable<double> cantidad, Nullable<decimal> precio, Nullable<decimal> iTBIS, Nullable<decimal> descuento, ObjectParameter resultado)
        {
            var cotizacionIDParameter = cotizacionID.HasValue ?
                new ObjectParameter("CotizacionID", cotizacionID) :
                new ObjectParameter("CotizacionID", typeof(int));
    
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(double));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var iTBISParameter = iTBIS.HasValue ?
                new ObjectParameter("ITBIS", iTBIS) :
                new ObjectParameter("ITBIS", typeof(decimal));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarDetalleCotizacion", detalleCotizacionID, cotizacionIDParameter, productoIDParameter, cantidadParameter, precioParameter, iTBISParameter, descuentoParameter, resultado);
        }
    
        public virtual ObjectResult<proc_CargarCotizacionesActivas_Result> proc_CargarCotizacionesActivas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarCotizacionesActivas_Result>("proc_CargarCotizacionesActivas");
        }
    
        public virtual int proc_BorrarCotizacion(Nullable<int> cotizacionID, ObjectParameter resultado)
        {
            var cotizacionIDParameter = cotizacionID.HasValue ?
                new ObjectParameter("CotizacionID", cotizacionID) :
                new ObjectParameter("CotizacionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarCotizacion", cotizacionIDParameter, resultado);
        }
    
        public virtual ObjectResult<proc_CargarProductosCotizacion_Result> proc_CargarProductosCotizacion(Nullable<int> cotizacionID)
        {
            var cotizacionIDParameter = cotizacionID.HasValue ?
                new ObjectParameter("CotizacionID", cotizacionID) :
                new ObjectParameter("CotizacionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarProductosCotizacion_Result>("proc_CargarProductosCotizacion", cotizacionIDParameter);
        }
    
        public virtual ObjectResult<proc_ComprobanteFacturaVenta_Result> proc_ComprobanteFacturaVenta(Nullable<int> facturaID)
        {
            var facturaIDParameter = facturaID.HasValue ?
                new ObjectParameter("FacturaID", facturaID) :
                new ObjectParameter("FacturaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ComprobanteFacturaVenta_Result>("proc_ComprobanteFacturaVenta", facturaIDParameter);
        }
    
        public virtual int proc_ActualizarEstatusCotizacion(Nullable<int> cotizacionID, ObjectParameter resultado)
        {
            var cotizacionIDParameter = cotizacionID.HasValue ?
                new ObjectParameter("CotizacionID", cotizacionID) :
                new ObjectParameter("CotizacionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarEstatusCotizacion", cotizacionIDParameter, resultado);
        }
    
        public virtual int proc_BorrarCobroVentaCredito(Nullable<int> cobroVentaCreditoID, ObjectParameter resultado)
        {
            var cobroVentaCreditoIDParameter = cobroVentaCreditoID.HasValue ?
                new ObjectParameter("CobroVentaCreditoID", cobroVentaCreditoID) :
                new ObjectParameter("CobroVentaCreditoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarCobroVentaCredito", cobroVentaCreditoIDParameter, resultado);
        }
    
        public virtual ObjectResult<proc_CargarProductosPorProveedor_Result> proc_CargarProductosPorProveedor(Nullable<int> proveedorID, Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var proveedorIDParameter = proveedorID.HasValue ?
                new ObjectParameter("ProveedorID", proveedorID) :
                new ObjectParameter("ProveedorID", typeof(int));
    
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarProductosPorProveedor_Result>("proc_CargarProductosPorProveedor", proveedorIDParameter, indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual int proc_ActualizarLineaCreditoCompra(Nullable<int> lineaCreditoCompraID, Nullable<bool> estatus, ObjectParameter resultado)
        {
            var lineaCreditoCompraIDParameter = lineaCreditoCompraID.HasValue ?
                new ObjectParameter("LineaCreditoCompraID", lineaCreditoCompraID) :
                new ObjectParameter("LineaCreditoCompraID", typeof(int));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarLineaCreditoCompra", lineaCreditoCompraIDParameter, estatusParameter, resultado);
        }
    
        public virtual ObjectResult<proc_CargarTodasLineasCreditoCompras_Result> proc_CargarTodasLineasCreditoCompras(Nullable<int> indicePagina, Nullable<int> tamanoPagina, string filtro, string columna)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var columnaParameter = columna != null ?
                new ObjectParameter("Columna", columna) :
                new ObjectParameter("Columna", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarTodasLineasCreditoCompras_Result>("proc_CargarTodasLineasCreditoCompras", indicePaginaParameter, tamanoPaginaParameter, filtroParameter, columnaParameter);
        }
    
        public virtual int proc_BorrarPagoCompraCredito(Nullable<int> pagoCompraCreditoID, ObjectParameter resultado)
        {
            var pagoCompraCreditoIDParameter = pagoCompraCreditoID.HasValue ?
                new ObjectParameter("PagoCompraCreditoID", pagoCompraCreditoID) :
                new ObjectParameter("PagoCompraCreditoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BorrarPagoCompraCredito", pagoCompraCreditoIDParameter, resultado);
        }
    
        public virtual ObjectResult<proc_CargarPagosCompraCredito_Result> proc_CargarPagosCompraCredito(Nullable<int> lineaCreditoCompraID)
        {
            var lineaCreditoCompraIDParameter = lineaCreditoCompraID.HasValue ?
                new ObjectParameter("LineaCreditoCompraID", lineaCreditoCompraID) :
                new ObjectParameter("LineaCreditoCompraID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarPagosCompraCredito_Result>("proc_CargarPagosCompraCredito", lineaCreditoCompraIDParameter);
        }
    
        public virtual int proc_InsertarLineaCreditoCompra(ObjectParameter lineaCreditoCompraID, Nullable<int> facturaCompraID, Nullable<bool> estatus, ObjectParameter resultado)
        {
            var facturaCompraIDParameter = facturaCompraID.HasValue ?
                new ObjectParameter("FacturaCompraID", facturaCompraID) :
                new ObjectParameter("FacturaCompraID", typeof(int));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarLineaCreditoCompra", lineaCreditoCompraID, facturaCompraIDParameter, estatusParameter, resultado);
        }
    
        public virtual int proc_InsertarPagoCompraCredito(ObjectParameter pagoCompraCreditoID, Nullable<int> lineaCreditoCompraID, Nullable<System.DateTime> fechaPago, Nullable<decimal> monto, Nullable<int> userID, string concepto, ObjectParameter resultado)
        {
            var lineaCreditoCompraIDParameter = lineaCreditoCompraID.HasValue ?
                new ObjectParameter("LineaCreditoCompraID", lineaCreditoCompraID) :
                new ObjectParameter("LineaCreditoCompraID", typeof(int));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarPagoCompraCredito", pagoCompraCreditoID, lineaCreditoCompraIDParameter, fechaPagoParameter, montoParameter, userIDParameter, conceptoParameter, resultado);
        }
    
        public virtual int proc_ActualizarCantidadProductoPorID(Nullable<int> productoID, Nullable<double> existencia, ObjectParameter resultado)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var existenciaParameter = existencia.HasValue ?
                new ObjectParameter("Existencia", existencia) :
                new ObjectParameter("Existencia", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_ActualizarCantidadProductoPorID", productoIDParameter, existenciaParameter, resultado);
        }
    
        public virtual ObjectResult<proc_ComprobanteOrdenCompra_Result> proc_ComprobanteOrdenCompra(Nullable<int> ordenCompraID)
        {
            var ordenCompraIDParameter = ordenCompraID.HasValue ?
                new ObjectParameter("OrdenCompraID", ordenCompraID) :
                new ObjectParameter("OrdenCompraID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ComprobanteOrdenCompra_Result>("proc_ComprobanteOrdenCompra", ordenCompraIDParameter);
        }
    
        public virtual ObjectResult<proc_ResumenSistema_Result> proc_ResumenSistema()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_ResumenSistema_Result>("proc_ResumenSistema");
        }
    
        public virtual ObjectResult<proc_CargarProductosMasVendidos_Result> proc_CargarProductosMasVendidos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarProductosMasVendidos_Result>("proc_CargarProductosMasVendidos");
        }
    
        public virtual ObjectResult<proc_CargarFacturasCFinalPFecha_Result> proc_CargarFacturasCFinalPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturasCFinalPFecha_Result>("proc_CargarFacturasCFinalPFecha", fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<proc_CargarFacturasCFiscalPFecha_Result> proc_CargarFacturasCFiscalPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturasCFiscalPFecha_Result>("proc_CargarFacturasCFiscalPFecha", fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<proc_CargarFacturasCGubernamentalPFecha_Result> proc_CargarFacturasCGubernamentalPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturasCGubernamentalPFecha_Result>("proc_CargarFacturasCGubernamentalPFecha", fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual int proc_BuscarLineaDeCreditoVentaIDFactura(Nullable<int> facturaID, ObjectParameter lineaCreditoVentaID)
        {
            var facturaIDParameter = facturaID.HasValue ?
                new ObjectParameter("FacturaID", facturaID) :
                new ObjectParameter("FacturaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_BuscarLineaDeCreditoVentaIDFactura", facturaIDParameter, lineaCreditoVentaID);
        }
    
        public virtual ObjectResult<proc_CargarMovimientos_Result> proc_CargarMovimientos(Nullable<int> productoID, Nullable<int> indicePagina, Nullable<int> tamanoPagina)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarMovimientos_Result>("proc_CargarMovimientos", productoIDParameter, indicePaginaParameter, tamanoPaginaParameter);
        }
    
        public virtual int proc_InsertarMovimiento(ObjectParameter movimientoID, Nullable<int> productoID, Nullable<System.DateTime> fecha, string tipoMovimiento, Nullable<int> referencia, Nullable<decimal> cantidad, Nullable<int> usuarioID, ObjectParameter resultado)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var tipoMovimientoParameter = tipoMovimiento != null ?
                new ObjectParameter("TipoMovimiento", tipoMovimiento) :
                new ObjectParameter("TipoMovimiento", typeof(string));
    
            var referenciaParameter = referencia.HasValue ?
                new ObjectParameter("Referencia", referencia) :
                new ObjectParameter("Referencia", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(decimal));
    
            var usuarioIDParameter = usuarioID.HasValue ?
                new ObjectParameter("UsuarioID", usuarioID) :
                new ObjectParameter("UsuarioID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertarMovimiento", movimientoID, productoIDParameter, fechaParameter, tipoMovimientoParameter, referenciaParameter, cantidadParameter, usuarioIDParameter, resultado);
        }
    
        public virtual ObjectResult<proc_CargarFacturasRapidaPFecha_Result> proc_CargarFacturasRapidaPFecha(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturasRapidaPFecha_Result>("proc_CargarFacturasRapidaPFecha", fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<proc_CargarFacturasPCliente_Result> proc_CargarFacturasPCliente(Nullable<int> clienteID)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarFacturasPCliente_Result>("proc_CargarFacturasPCliente", clienteIDParameter);
        }
    
        public virtual ObjectResult<proc_BuscarClientePID_Result> proc_BuscarClientePID(Nullable<int> clienteID)
        {
            var clienteIDParameter = clienteID.HasValue ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_BuscarClientePID_Result>("proc_BuscarClientePID", clienteIDParameter);
        }
    
        public virtual ObjectResult<proc_CargarProductosExistBaja_Result> proc_CargarProductosExistBaja(Nullable<int> indicePagina, Nullable<int> tamanoPagina)
        {
            var indicePaginaParameter = indicePagina.HasValue ?
                new ObjectParameter("IndicePagina", indicePagina) :
                new ObjectParameter("IndicePagina", typeof(int));
    
            var tamanoPaginaParameter = tamanoPagina.HasValue ?
                new ObjectParameter("TamanoPagina", tamanoPagina) :
                new ObjectParameter("TamanoPagina", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_CargarProductosExistBaja_Result>("proc_CargarProductosExistBaja", indicePaginaParameter, tamanoPaginaParameter);
        }
    }
}
